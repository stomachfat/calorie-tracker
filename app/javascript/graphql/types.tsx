import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** Autogenerated input type of AddFoodEntry */
export type AddFoodEntryInput = {
  calories: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  priceInCents: Scalars['Int'];
};

export type FoodEntry = {
  __typename?: 'FoodEntry';
  calories: Scalars['Int'];
  createdAt: Scalars['String'];
  createdBy: User;
  id: Scalars['ID'];
  name: Scalars['String'];
  priceInCents: Scalars['Int'];
};

export type Mutation = {
  __typename?: 'Mutation';
  addFoodEntry?: Maybe<FoodEntry>;
  /** An example field added by the generator */
  testField: Scalars['String'];
};


export type MutationAddFoodEntryArgs = {
  input: AddFoodEntryInput;
};

export type Query = {
  __typename?: 'Query';
  /** All food entries */
  foodEntries: Array<FoodEntry>;
  /** Current User */
  user: User;
  /** Users of Hey Honey! */
  users: Array<User>;
};

export type User = {
  __typename?: 'User';
  dailyCalorieLimit: Scalars['Int'];
  email: Scalars['String'];
  fullName: Scalars['String'];
  id: Scalars['ID'];
  monthlySpendingLimitInCents: Scalars['Int'];
  userName: Scalars['String'];
};

export type GetAllUsersQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllUsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', id: string, email: string, userName: string, fullName: string }> };

export type GetAllFoodEntiesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllFoodEntiesQuery = { __typename?: 'Query', foodEntries: Array<{ __typename: 'FoodEntry', id: string, name: string, calories: number, priceInCents: number, createdAt: string }> };

export type AddFoodEntryMutationVariables = Exact<{
  name: Scalars['String'];
  calories: Scalars['Int'];
  priceInCents: Scalars['Int'];
}>;


export type AddFoodEntryMutation = { __typename?: 'Mutation', addFoodEntry?: { __typename: 'FoodEntry', id: string, name: string, calories: number, priceInCents: number, createdAt: string } | null };

export type GetUserLimitsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetUserLimitsQuery = { __typename?: 'Query', user: { __typename?: 'User', id: string, dailyCalorieLimit: number, monthlySpendingLimitInCents: number } };

export type GetAllFoodEntiesAndUserLimitsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllFoodEntiesAndUserLimitsQuery = { __typename?: 'Query', foodEntries: Array<{ __typename: 'FoodEntry', id: string, name: string, calories: number, priceInCents: number, createdAt: string }>, user: { __typename?: 'User', id: string, dailyCalorieLimit: number, monthlySpendingLimitInCents: number } };


export const GetAllUsersDocument = gql`
    query getAllUsers {
  users {
    id
    email
    userName
    fullName
  }
}
    `;

/**
 * __useGetAllUsersQuery__
 *
 * To run a query within a React component, call `useGetAllUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllUsersQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllUsersQuery(baseOptions?: Apollo.QueryHookOptions<GetAllUsersQuery, GetAllUsersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllUsersQuery, GetAllUsersQueryVariables>(GetAllUsersDocument, options);
      }
export function useGetAllUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllUsersQuery, GetAllUsersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllUsersQuery, GetAllUsersQueryVariables>(GetAllUsersDocument, options);
        }
export type GetAllUsersQueryHookResult = ReturnType<typeof useGetAllUsersQuery>;
export type GetAllUsersLazyQueryHookResult = ReturnType<typeof useGetAllUsersLazyQuery>;
export type GetAllUsersQueryResult = Apollo.QueryResult<GetAllUsersQuery, GetAllUsersQueryVariables>;
export const GetAllFoodEntiesDocument = gql`
    query getAllFoodEnties {
  foodEntries {
    id
    __typename
    name
    calories
    priceInCents
    createdAt
  }
}
    `;

/**
 * __useGetAllFoodEntiesQuery__
 *
 * To run a query within a React component, call `useGetAllFoodEntiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllFoodEntiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllFoodEntiesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllFoodEntiesQuery(baseOptions?: Apollo.QueryHookOptions<GetAllFoodEntiesQuery, GetAllFoodEntiesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllFoodEntiesQuery, GetAllFoodEntiesQueryVariables>(GetAllFoodEntiesDocument, options);
      }
export function useGetAllFoodEntiesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllFoodEntiesQuery, GetAllFoodEntiesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllFoodEntiesQuery, GetAllFoodEntiesQueryVariables>(GetAllFoodEntiesDocument, options);
        }
export type GetAllFoodEntiesQueryHookResult = ReturnType<typeof useGetAllFoodEntiesQuery>;
export type GetAllFoodEntiesLazyQueryHookResult = ReturnType<typeof useGetAllFoodEntiesLazyQuery>;
export type GetAllFoodEntiesQueryResult = Apollo.QueryResult<GetAllFoodEntiesQuery, GetAllFoodEntiesQueryVariables>;
export const AddFoodEntryDocument = gql`
    mutation AddFoodEntry($name: String!, $calories: Int!, $priceInCents: Int!) {
  addFoodEntry(
    input: {name: $name, calories: $calories, priceInCents: $priceInCents}
  ) {
    id
    __typename
    name
    calories
    priceInCents
    createdAt
  }
}
    `;
export type AddFoodEntryMutationFn = Apollo.MutationFunction<AddFoodEntryMutation, AddFoodEntryMutationVariables>;

/**
 * __useAddFoodEntryMutation__
 *
 * To run a mutation, you first call `useAddFoodEntryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddFoodEntryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addFoodEntryMutation, { data, loading, error }] = useAddFoodEntryMutation({
 *   variables: {
 *      name: // value for 'name'
 *      calories: // value for 'calories'
 *      priceInCents: // value for 'priceInCents'
 *   },
 * });
 */
export function useAddFoodEntryMutation(baseOptions?: Apollo.MutationHookOptions<AddFoodEntryMutation, AddFoodEntryMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AddFoodEntryMutation, AddFoodEntryMutationVariables>(AddFoodEntryDocument, options);
      }
export type AddFoodEntryMutationHookResult = ReturnType<typeof useAddFoodEntryMutation>;
export type AddFoodEntryMutationResult = Apollo.MutationResult<AddFoodEntryMutation>;
export type AddFoodEntryMutationOptions = Apollo.BaseMutationOptions<AddFoodEntryMutation, AddFoodEntryMutationVariables>;
export const GetUserLimitsDocument = gql`
    query getUserLimits {
  user {
    id
    dailyCalorieLimit
    monthlySpendingLimitInCents
  }
}
    `;

/**
 * __useGetUserLimitsQuery__
 *
 * To run a query within a React component, call `useGetUserLimitsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserLimitsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserLimitsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetUserLimitsQuery(baseOptions?: Apollo.QueryHookOptions<GetUserLimitsQuery, GetUserLimitsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserLimitsQuery, GetUserLimitsQueryVariables>(GetUserLimitsDocument, options);
      }
export function useGetUserLimitsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserLimitsQuery, GetUserLimitsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserLimitsQuery, GetUserLimitsQueryVariables>(GetUserLimitsDocument, options);
        }
export type GetUserLimitsQueryHookResult = ReturnType<typeof useGetUserLimitsQuery>;
export type GetUserLimitsLazyQueryHookResult = ReturnType<typeof useGetUserLimitsLazyQuery>;
export type GetUserLimitsQueryResult = Apollo.QueryResult<GetUserLimitsQuery, GetUserLimitsQueryVariables>;
export const GetAllFoodEntiesAndUserLimitsDocument = gql`
    query getAllFoodEntiesAndUserLimits {
  foodEntries {
    id
    __typename
    name
    calories
    priceInCents
    createdAt
  }
  user {
    id
    dailyCalorieLimit
    monthlySpendingLimitInCents
  }
}
    `;

/**
 * __useGetAllFoodEntiesAndUserLimitsQuery__
 *
 * To run a query within a React component, call `useGetAllFoodEntiesAndUserLimitsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllFoodEntiesAndUserLimitsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllFoodEntiesAndUserLimitsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllFoodEntiesAndUserLimitsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllFoodEntiesAndUserLimitsQuery, GetAllFoodEntiesAndUserLimitsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllFoodEntiesAndUserLimitsQuery, GetAllFoodEntiesAndUserLimitsQueryVariables>(GetAllFoodEntiesAndUserLimitsDocument, options);
      }
export function useGetAllFoodEntiesAndUserLimitsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllFoodEntiesAndUserLimitsQuery, GetAllFoodEntiesAndUserLimitsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllFoodEntiesAndUserLimitsQuery, GetAllFoodEntiesAndUserLimitsQueryVariables>(GetAllFoodEntiesAndUserLimitsDocument, options);
        }
export type GetAllFoodEntiesAndUserLimitsQueryHookResult = ReturnType<typeof useGetAllFoodEntiesAndUserLimitsQuery>;
export type GetAllFoodEntiesAndUserLimitsLazyQueryHookResult = ReturnType<typeof useGetAllFoodEntiesAndUserLimitsLazyQuery>;
export type GetAllFoodEntiesAndUserLimitsQueryResult = Apollo.QueryResult<GetAllFoodEntiesAndUserLimitsQuery, GetAllFoodEntiesAndUserLimitsQueryVariables>;